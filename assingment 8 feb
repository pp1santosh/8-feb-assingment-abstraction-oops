{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "55a26153-4a3b-4894-aed9-c0ddf19588db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it has 4 legs,but run at 90 kmph\n",
      "all animal can not talk in our language\n"
     ]
    }
   ],
   "source": [
    "#1 sol\n",
    "# abstracton means hiding the coplexity of programme from user and creating a user friendly environment .\n",
    "import abc \n",
    "class animal:\n",
    "    def talk(u):\n",
    "        print(\"all animal can not talk in our language\")\n",
    "    @abc.abstractmethod\n",
    "    def color_sound():\n",
    "        pass\n",
    "    @abc.abstractmethod\n",
    "    def legs():\n",
    "        pass\n",
    "class dog(animal):\n",
    "    def colour_sound(self):\n",
    "        print(\"dog colour is either black,white,or brown\")\n",
    "        print(\"it barks\")\n",
    "    def legs(self):\n",
    "        print(\"it has 4 legs\")\n",
    "class lepord(animal):\n",
    "    def colour_sound(self):\n",
    "        print(\"lepord colour is yello with black spot\")\n",
    "        print(\"it rors\")\n",
    "    def legs(self):\n",
    "        print(\"it has 4 legs,but run at 90 kmph\")\n",
    "        \n",
    "c=lepord()\n",
    "c.legs()\n",
    "c.talk()    \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "775d252e-7b78-49b5-b40f-571e291cbd19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11000\n",
      "9000\n"
     ]
    }
   ],
   "source": [
    "#2.abstration means hiding unnessary set of code but in encapsulation we restrict access of attribute to user\n",
    "#encapsulation  helps in maintaing data security\n",
    "class account: # example of encapsulation\n",
    "    def __init__(self,balance):\n",
    "        self.__balance=balance\n",
    "    def deposit(self,amount):\n",
    "        self.__balance=self.__balance+amount\n",
    "    def withdraw(self,amount):\n",
    "        self.__balance=self.__balance-amount\n",
    "    def mybalance(self):\n",
    "        print(self.__balance)\n",
    "bnk=account(10000)\n",
    "bnk.deposit(1000)\n",
    "bnk.mybalance()\n",
    "bnk.withdraw(2000)\n",
    "bnk.mybalance()\n",
    "\n",
    "#      \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d16203ca-b78a-4084-a049-61ac4020c3d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3. ABC module is needed to achieve abstraction without it we can not clearte  base abstract class .\n",
    "# ABC bodule has decorator \"@.abc abstract\" to assosiate a abstract method and seprate it fron concrete method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "944928e0-28a5-4c25-905f-3b7c56d04821",
   "metadata": {},
   "outputs": [],
   "source": [
    "#4 data abstraction can be acieved by sepration of interface and implementation part of method  and attribute.\n",
    "#it is done by building abstract class including abc module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41e8e8d2-fff5-4dcc-9706-074360ebbd03",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5 sol.no we can not create instance of base class.\n",
    "#it contains abstract method which has to be implemented in subclass or child class,to hide complex part"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
